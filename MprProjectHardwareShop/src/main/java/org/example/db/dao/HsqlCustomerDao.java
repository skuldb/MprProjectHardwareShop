package org.example.db.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.example.db.DaoBase;
import org.example.db.EntityBase;
import org.example.db.HsqlUnitOfWork;
//import org.example.shop.Address;
import org.example.shop.Customer;

public class HsqlCustomerDao extends HsqlDaoBase<Customer> implements CustomerDao{

	
	public HsqlCustomerDao(HsqlUnitOfWork uow) {
		super(uow);
	}

	public void setAddresses(Customer c) {
		
	}

	public void setOrders(Customer c) {
		
	}

	@Override
	protected void setUpdateQuery(Customer ent) throws SQLException {

		update.setString(1, ent.getName());
		update.setString(2, ent.getAdress());
		update.setString(3, ent.getNip());
		update.setString(4, ent.getPhoneNumber());
		update.setInt(5, ent.getId());
		
	}

	@Override
	protected Customer build(ResultSet rs) throws SQLException {

		Customer c = new Customer();
		c.setNip(rs.getString("NIP"));
		c.setName(rs.getString("name"));
		c.setAdress(rs.getString("Adress"));
		c.setPhoneNumber(rs.getString("PhoneNumber"));
		c.setId(rs.getInt("id"));
		return c;
	}

	@Override
	protected void setInsertQuery(Customer ent) throws SQLException {
		insert.setString(1, ent.getName());
		insert.setString(2, ent.getAdress());
		insert.setString(3, ent.getNip());
		insert.setString(4, ent.getPhoneNumber());
		
		
	}

	@Override
	protected String getTableName() {
		return "client";
	}

	@Override
	protected String getCreateQuery() {
		return "CREATE TABLE Customer("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "name VARCHAR(50),"
				+ "Nip VARCHAR(10),"
				+ "Adress VARCHAR(200),"
				+ "PhoneNumber VARCHAR(12)"
				+ ")";
	}

	@Override
	protected String getInsertQuery() {
		return "insert into customer(name,Nip,Adress,PhoneNumber) values (?,?,?,?)";
	}

	@Override
	protected String getUpdateQuery() {
		return "update client set"
				+ "(name,Nip,Adress,PhoneNumber)=(?,?,?,?)"
				+ "where id=?";
	}

	
	
	
/*	
	private Statement stmt;

	private PreparedStatement insert;
	private PreparedStatement delete;
	private PreparedStatement update;
	private PreparedStatement select;
	private PreparedStatement selectId;
	AddressDao addressDao;
	
	
	public HsqlClientDao(HsqlUnitOfWork uow)
	{
		super(uow);
		try {
			Connection connection = uow.getConnection();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean exist = false;
			
			stmt =connection.createStatement();
			
			while(rs.next())
			{
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("Client"))
				{
					exist = true;
					break;
				}
			}
			if(!exist)
			{
				stmt.executeUpdate("CREATE TABLE Client("
						+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
						+ "name VARCHAR(50),"
						+ "surname VARCHAR(50),"
						+ "email VARCHAR(50),"
						+ "number VARCHAR(50)"
						+ ")");
			}
			
			insert = connection.prepareStatement(""
					+ "insert into client(name,surname,email,number) values (?,?,?,?)");
			
			update = connection.prepareStatement(""
					+ "update client set"
					+ "(name,surname,email,number)=(?,?,?,?)"
					+ "where id=?");
			
			delete = connection.prepareStatement(""
					+ "delete from Client where id=?");
			
			selectId = connection.prepareStatement(""
					+ "select * from Client where id=?");
			
			select = connection.prepareStatement(""
					+ "select * from client");
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		
	}
	
	
	public void persistAdd(EntityBase entity) {
	
		Client ent = (Client) entity;
		try 
		{
			insert.setString(1, ent.getName());
			insert.setString(2, ent.getSurname());
			insert.setString(3, ent.getEmail());
			insert.setString(4, ent.getNumber());
			
			insert.executeUpdate();
			
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void persistDelete(EntityBase entity) {
		Client ent = (Client) entity;
		try 
		{
			delete.setInt(1, ent.getId());
			delete.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	public List<Client> getAll() {
		
		List<Client> clients = new ArrayList<Client>();
		
		try
		{
			ResultSet rs = select.executeQuery();
			while(rs.next()){
			
				Client c = new Client();
				c.setEmail(rs.getString("email"));
				c.setName(rs.getString("name"));
				c.setSurname(rs.getString("surname"));
				c.setNumber(rs.getString("number"));
				c.setId(rs.getInt("id"));
				clients.add(c);
			}
		}
		
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
		
		return clients;
	}

	public Client get(int id) {
		
		try {
			selectId.setInt(1, id);
			ResultSet rs = selectId.executeQuery();
			while(rs.next()){
			
				Client c = new Client();
				c.setEmail(rs.getString("email"));
				c.setName(rs.getString("name"));
				c.setSurname(rs.getString("surname"));
				c.setNumber(rs.getString("number"));
				c.setId(rs.getInt("id"));
				return c;
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}

	public void setAddresses(Client c) {
		c.setAddresses(addressDao.getAddressByClientId(c.getId()));
		
	}

	public void setOrders(Client c) {
		// TODO Auto-generated method stub
		
	}


	public void persistUpdate(EntityBase entity) {

		Client ent = (Client) entity;
		try
		{
			update.setString(1, ent.getName());
			update.setString(2, ent.getSurname());
			update.setString(3, ent.getEmail());
			update.setString(4, ent.getNumber());
			update.setInt(5, ent.getId());
			update.executeUpdate();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
		
		
	}

*/

}
